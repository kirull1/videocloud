# VideoCloud Project Intelligence

This file captures important patterns, preferences, and project intelligence that help me work more effectively with the VideoCloud project. It serves as a learning journal that evolves as I work with the project and discover new insights.

## Project Structure Patterns

- **Monorepo Organization**: The project follows a monorepo structure with separate directories for frontend and backend, with common configuration at the root.
- **Frontend Structure**: Frontend follows Feature-Sliced Design (FSD) architecture with layers: app → pages → widgets → features → entities → shared.
- **Backend Structure**: NestJS modules are organized by domain (users, videos, comments, etc.).
- **Memory Bank**: Documentation is maintained in the memory-bank directory with specific files for different aspects of the project.
- **Configuration**: Common configuration files are placed at the root level and extended by specific packages.
- **Dependencies**: Root package.json contains minimal dependencies, with most dependencies managed at the package level.
- **Workspace**: Project uses pnpm workspaces with pnpm-workspace.yaml for monorepo management.
- **Path Aliases**: Both frontend and backend use path aliases to improve code organization and readability:
  - Frontend uses FSD-based aliases: @app, @pages, @widgets, @features, @entities, @shared
  - Backend uses domain-based aliases: @app, @modules, @common, @config, @utils, etc.
  - Documentation for path aliases is available in docs/path-aliases.md

## Coding Conventions

- **Style Guide**: The project follows the Airbnb JavaScript Style Guide with project-specific modifications documented in `docs/style-guide.md`, including the use of double quotes instead of single quotes.
- **TypeScript**: All code is written in TypeScript with strict type checking.
- **Naming Conventions**:
  - PascalCase for component names, interfaces, and classes
  - camelCase for variables, functions, and methods
  - kebab-case for file names
  - UPPER_SNAKE_CASE for constants
- **Import Order**: Imports should be organized in groups: external libraries, internal modules, types, assets.
- **Component Structure**: Vue components follow the script-template-style structure with script setup. Each component should have:
  - ComponentName.vue - The component implementation
  - index.ts - Re-export file for clean imports
  - ComponentName.stories.ts - Storybook documentation
  - ComponentName.spec.ts - Playwright screenshot tests
  - ComponentName.test.ts - Unit tests with Vitest
  - __screenshots__/ - Directory for screenshot references
  - NOTE: Do NOT create README.md files for components
- **Linting and Formatting**: ESLint and Prettier are used to enforce code style. Run `pnpm run style` to format code.

## Development Workflow

- **Version Control**: 
  - Feature branches should be created from main
  - Branch naming: feature/feature-name, fix/issue-name, etc.
  - Commits should be atomic and follow conventional commits format
- **Testing Requirements**:
  - New features require unit tests
  - Critical components require E2E tests
  - Backend endpoints require integration tests
  - UI components require Storybook stories
  - UI components require screenshot tests for mobile and desktop viewports
  - Screenshot tests should be run using the automated script: `pnpm run test:screenshots:all`
  - After creating a new component, you MUST create:
    1. Storybook stories (.stories.ts)
    2. Screenshot tests (.spec.ts)
    3. Unit tests (.test.ts)
  - All dependencies in package.json files must use exact versions (no ^ or ~ prefixes) to ensure reproducibility
  - Use the root-level .gitignore file for all services in the monorepo to maintain consistency
  - The missing service uses npm instead of pnpm for dependency management and builds
  - The missing service build process skips TypeScript type checking to avoid compatibility issues
  - The 404 page supports multiple error codes (404, 403, 500, 503) with appropriate messages
  - The 404 page design includes decorative elements (curved lines, triangles) and follows the minimalist style
  - Styles should be kept in separate CSS files for better organization and maintainability
- **Code Review Process**: 
  - All PRs require at least one reviewer
  - CI checks must pass before merging
  - Documentation updates should be included when relevant

## Technical Decisions

- **State Management**: MobX is preferred over Vuex/Pinia for state management.
- **API Design**: RESTful API is the current approach, with potential for GraphQL later.
- **Authentication**: JWT-based authentication with refresh tokens.
- **Storage Strategy**: AWS S3 for video storage with CloudFront for CDN.
- **Database Access**: TypeORM repositories with query builders for complex queries.

## User Preferences

- **Documentation Style**: Markdown with clear sections and examples.
- **Code Organization**: Prefer smaller, focused files over large monolithic ones.
- **Error Handling**: Comprehensive error handling with meaningful error messages.
- **Performance Considerations**: Optimize for video playback performance and page load times.

## Common Challenges

- **Video Processing**: Transcoding is resource-intensive and requires careful optimization.
- **Real-time Features**: WebSockets implementation needs careful consideration for scaling.
- **State Synchronization**: Keeping UI state in sync with backend changes.
- **Large File Uploads**: Handling video uploads requires chunked uploading and progress tracking.

## Project Evolution

- **Initial Phase**: Focus on core video upload and playback functionality.
- **Second Phase**: Enhance with social features and content discovery.
- **Third Phase**: Add monetization and advanced analytics.
- **Future Expansion**: Mobile apps and third-party integrations.

## Tool Usage Patterns

- **Package Management**: Use pnpm for all package management operations.
- **Testing**: Jest for unit tests, Playwright for E2E tests.
- **Linting**: ESLint with Prettier integration.
- **Build Process**: Vite for frontend, NestJS CLI for backend.
- **Component Development**: Storybook for UI component development and documentation.
- **Database Migrations**: TypeORM migrations for schema changes.

## Critical Implementation Paths

- **Authentication Flow**: User registration → Email verification → Login → JWT issuance
- **Video Upload Flow**: File selection → Chunked upload → Backend validation → Processing queue → Transcoding → Storage → Availability
- **Video Playback Flow**: Request → Authorization check → CDN delivery → Adaptive streaming → Analytics tracking

## Known Limitations

- **Initial Version**: No support for live streaming in the MVP.
- **Scalability**: Initial implementation may have limitations for very high traffic.
- **Browser Support**: Targeting modern browsers only (last 2 versions).
- **Mobile Experience**: Responsive design but no native mobile apps in initial version.

This file will be updated as new patterns and insights are discovered throughout the development process.
