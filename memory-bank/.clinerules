# VideoCloud Project Intelligence

This file captures important patterns, preferences, and project intelligence that help me work more effectively with the VideoCloud project. It serves as a learning journal that evolves as I work with the project and discover new insights.

## Project Structure Patterns

- **Monorepo Organization**: The project follows a monorepo structure with separate directories for frontend and backend, with common configuration at the root.
- **Frontend Structure**: Frontend follows Feature-Sliced Design (FSD) architecture with layers: app → pages → widgets → features → entities → shared.
- **Backend Structure**: NestJS modules are organized by domain (users, videos, comments, etc.).
- **Memory Bank**: Documentation is maintained in the memory-bank directory with specific files for different aspects of the project.
- **Configuration**: Common configuration files are placed at the root level and extended by specific packages.
- **Dependencies**: Root package.json contains minimal dependencies, with most dependencies managed at the package level.
- **Workspace**: Project uses pnpm workspaces with pnpm-workspace.yaml for monorepo management.
- **Path Aliases**: Both frontend and backend use path aliases to improve code organization and readability:
  - Frontend uses FSD-based aliases: @app, @pages, @widgets, @features, @entities, @shared
  - Backend uses domain-based aliases: @app, @modules, @common, @config, @utils, etc.
  - Documentation for path aliases is available in docs/path-aliases.md

## Coding Conventions

- **Style Guide**: The project follows the Airbnb JavaScript Style Guide with project-specific modifications documented in `docs/style-guide.md`, including the use of double quotes instead of single quotes.
- **TypeScript**: All code is written in TypeScript with strict type checking.
- **Naming Conventions**:
  - PascalCase for component names, interfaces, and classes
  - camelCase for variables, functions, and methods
  - kebab-case for file names
  - UPPER_SNAKE_CASE for constants
- **Import Order**: Imports should be organized in groups: external libraries, internal modules, types, assets.
- **Component Structure**: Vue components follow the script-template-style structure with script setup. Each component should have:
  - ComponentName.vue - The component implementation
  - index.ts - Re-export file for clean imports
  - ComponentName.stories.ts - Storybook documentation
  - ComponentName.spec.ts - Playwright screenshot tests
  - ComponentName.test.ts - Unit tests with Vitest
  - __screenshots__/ - Directory for screenshot references
  - NOTE: Do NOT create README.md files for components
- **Linting and Formatting**: ESLint and Prettier are used to enforce code style. Run `pnpm run style` to format code.
- **Code Comments**: Code comments are strictly prohibited. The project follows a self-documenting code approach where variable names, function names, and code structure should be clear enough to understand without comments. All code should be written to be self-explanatory. If code requires explanation, it should be refactored to be more clear rather than adding comments.

## Development Workflow

- **Version Control**: 
  - Feature branches should be created from main
  - Branch naming: feature/feature-name, fix/issue-name, etc.
  - Commits should be atomic and follow conventional commits format
- **Testing Requirements**:
  - New features require unit tests
  - Critical components require E2E tests
  - Backend endpoints require integration tests
  - UI components require Storybook stories
  - UI components require screenshot tests for mobile and desktop viewports
  - Screenshot tests should be run using the automated script: `pnpm run test:screenshots:all`
  - After creating a new component, you MUST create:
    1. Storybook stories (.stories.ts)
    2. Screenshot tests (.spec.ts)
    3. Unit tests (.test.ts)
  - All dependencies in package.json files must use exact versions (no ^ or ~ prefixes) to ensure reproducibility
  - Use the root-level .gitignore file for all services in the monorepo to maintain consistency
  - The missing service uses npm instead of pnpm for dependency management and builds
  - The missing service build process skips TypeScript type checking to avoid compatibility issues
  - The 404 page supports multiple error codes (404, 403, 500, 503) with appropriate messages
  - The 404 page design includes decorative elements (curved lines, triangles) and follows the minimalist style
  - Styles should be kept in separate CSS files for better organization and maintainability
- **Code Review Process**: 
  - All PRs require at least one reviewer
  - CI checks must pass before merging
  - Documentation updates should be included when relevant

## Technical Decisions

- **State Management**: MobX is preferred over Vuex/Pinia for state management.
- **API Design**: RESTful API is the current approach, with potential for GraphQL later.
- **Authentication**: JWT-based authentication with refresh tokens.
- **Storage Strategy**: AWS S3 for video storage with CloudFront for CDN.
- **Database Access**: TypeORM repositories with query builders for complex queries.
- **File Upload Handling**: 
  - Use memory storage for file uploads in NestJS (not disk storage)
  - Use FormData for file uploads in frontend
  - Don't set Content-Type header when using FormData in frontend
  - Validate file buffer exists and is not empty in backend

## User Preferences

- **Documentation Style**: Markdown with clear sections and examples.
- **Code Organization**: Prefer smaller, focused files over large monolithic ones.
- **Error Handling**: Comprehensive error handling with meaningful error messages.
- **Performance Considerations**: Optimize for video playback performance and page load times.

## Common Challenges

- **Video Processing**: Transcoding is resource-intensive and requires careful optimization.
- **Real-time Features**: WebSockets implementation needs careful consideration for scaling.
- **State Synchronization**: Keeping UI state in sync with backend changes.
- **Large File Uploads**: Handling video uploads requires chunked uploading and progress tracking.
- **File Upload Issues**: 
  - Memory vs. disk storage in NestJS
  - FormData handling in frontend
  - Content-Type headers with FormData
  - Buffer validation in backend

## Project Evolution

- **Initial Phase**: Focus on core video upload and playback functionality.
- **Second Phase**: Enhance with social features and content discovery.
- **Third Phase**: Add monetization and advanced analytics.
- **Future Expansion**: Mobile apps and third-party integrations.

## Tool Usage Patterns

- **Package Management**: Use pnpm for all package management operations.
- **Testing**: Jest for unit tests, Playwright for E2E tests.
- **Linting**: ESLint with Prettier integration.
- **Build Process**: Vite for frontend, NestJS CLI for backend.
- **Component Development**: Storybook for UI component development and documentation.
- **Database Migrations**: TypeORM migrations for schema changes.
- **File Upload**: 
  - Multer with memory storage for backend file handling
  - FormData for frontend file uploads
  - AWS SDK for S3 integration

## Critical Implementation Paths

- **Authentication Flow**: User registration → Email verification → Login → JWT issuance
- **Video Upload Flow**: File selection → Chunked upload → Backend validation → Processing queue → Transcoding → Thumbnail generation → Storage → Availability
- **Video Thumbnail Flow**:
  1. User uploads video (with optional custom thumbnail)
  2. If custom thumbnail provided, it's stored in S3 with timestamp in filename
  3. If no custom thumbnail, video processing generates thumbnails at different timestamps
  4. Thumbnails are stored in different paths: custom in main folder, generated in "generated" subfolder
  5. Cache-busting parameters are added to thumbnail URLs to prevent browser caching
  6. Frontend uses full page reloads when navigating to video pages to ensure fresh thumbnails
  7. Original thumbnails are preserved if provided during upload
- **Video Playback Flow**: Request → Authorization check → CDN delivery → Adaptive streaming → Analytics tracking
- **Avatar Upload Flow**: 
  1. User selects avatar image in profile page
  2. Frontend validates file type and size
  3. FormData created with file (no Content-Type header)
  4. API receives file via FileInterceptor with memory storage
  5. Backend validates file buffer exists and is not empty
  6. S3Service uploads file to S3 bucket with public-read ACL
  7. Public URL generated and stored in user profile
  8. Frontend displays new avatar

## Known Limitations

- **Initial Version**: No support for live streaming in the MVP.
- **Scalability**: Initial implementation may have limitations for very high traffic.
- **Browser Support**: Targeting modern browsers only (last 2 versions).
- **Mobile Experience**: Responsive design but no native mobile apps in initial version.
- **File Upload**:
  - Maximum file size for avatars: 2MB
  - Allowed file types for avatars: jpg, jpeg, png, gif, webp
  - Maximum file size for video thumbnails: 5MB
  - Allowed file types for video thumbnails: jpg, jpeg, png
  - No chunked upload support for large files yet

## File Upload Gotchas

- **NestJS FileInterceptor**: 
  - Must use memory storage for cloud storage integration
  - Disk storage creates files on disk that need to be read again
  - Memory storage keeps file in buffer for direct upload to S3
- **Frontend FormData**: 
  - Don't set Content-Type header when using FormData
  - Let the browser set the correct multipart/form-data with boundary
  - Append file with original name: `formData.append('avatar', file, file.name)`
- **S3 Upload**: 
  - Use PutObjectCommand from @aws-sdk/client-s3
  - Set ACL to 'public-read' for publicly accessible files
  - Generate unique filenames to prevent overwrites
  - Store full URL in database for easy access
  - Add cache-busting parameters to URLs for frequently updated resources
  - Set proper cache control headers for optimal caching behavior
  - Use different storage paths for different types of generated content
  - Preserve original user-uploaded content when generating alternatives

This file will be updated as new patterns and insights are discovered throughout the development process.
